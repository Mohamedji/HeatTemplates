heat_template_version: 2017-02-24
description: Deploy Kubernetes cluster with kubeadm

parameters:
    key_name:
        type: string
        label: Key Name
        description: SSH key to be used for all instances
    image:
        type: string
        label: Image
        description: Image to be used
        default: ubuntu-16-04-amd64-cloudimg    
    master_flavor:
        type: string
        label: Master Instance Type
        description: Type of instance (flavor) to deploy master node
        default: m1.small
    slave_count:
        type: number
        label: Slave Count
        description: Number of slaves
        default: 3
    slave_flavor:
        type: string
        label: Slave Instance Type
        description: Type of instance (flavor) to deploy slave nodes
        default: m1.small
    public_network_id:
        type: string
        description: ID of the public network
        default: public
    internal_net:
        type: string
        description: ID of the internal network
        default: public
    resource_prefix:
        type: string
        description: Prefix to add to all resources
        default: k8s-
    dns_nameservers:
        type: comma_delimited_list
        label: DNS Nameservers
        description: DNS nameservers to use on nodes
        default: 8.8.8.8
    availability_zone:
        type: string
        label: Availability Zone
        description: Availabilito zone to create nodes in
    security_group:
        type: string
        label: Security Group
        description: Security group to apply to nodes
    proxy_host:
        type: string
        label: Proxy Host
        description: Proxy host to use
        default: ""
    proxy_port:
        type: number
        label: Proxy Port
        description: Proxy port to use
        default: 0
    volume_size:
        type: number
        default: 50
conditions:
    empty_proxy:
        equals:
            - { get_param: proxy_host }
            - ""

resources:
    random_string:
        type: OS::Heat::RandomString
        properties:
            length: 8
            sequence: lowercase
    ##### Master #####
    master_config:
        type: OS::Heat::CloudConfig
        properties:
            cloud_config:
                write_files:
                    - path: /root/calico.yaml
                      content: { get_file: calico.yaml }
                    - path: /root/webserver.py
                      content: { get_file: webserver.py }
    master:
        type: node.yaml
        properties:
            index: 0
            key_name: { get_param: key_name }
            image: { get_param: image }
            flavor: { get_param: master_flavor }
            public_network_id: { get_param: public_network_id }
            additional_config: { get_resource: master_config }
            availability_zone: { get_param: availability_zone }
            volume_size: { get_param: volume_size }
            name:
                str_replace:
                    template: $prefix$random-master
                    params:
                        $prefix: { get_param: resource_prefix }
                        $random: { get_resource: random_string }
            internal_net: { get_param: internal_net }
            proxy_host: { get_param: proxy_host }
            proxy_port: { get_param: proxy_port }
            security_group: { get_param: security_group }
            install_script:
                str_replace:
                    params:
                        $proxy_host: { get_param: proxy_host }
                        $proxy_port: { get_param: proxy_port }
                    template: { get_file: master.sh }
    ##### Slaves #####
    slaves:
        type: OS::Heat::ResourceGroup
        properties:
            count: { get_param: slave_count }
            resource_def:
                type: node.yaml
                properties:
                    index: "%index%"
                    key_name: { get_param: key_name }
                    image: { get_param: image }
                    flavor: { get_param: slave_flavor }
                    public_network_id: { get_param: public_network_id }
                    availability_zone: { get_param: availability_zone }
                    volume_size: { get_param: volume_size}
                    name:
                        str_replace:
                            template: $prefix$random-slave-%index%
                            params:
                                $prefix: { get_param: resource_prefix }
                                $random: { get_resource: random_string }
                    internal_net: { get_param: internal_net }
                    proxy_host: { get_param: proxy_host }
                    proxy_port: { get_param: proxy_port }
                    security_group: { get_param: security_group }
                    install_script:
                        str_replace:
                            params:
                                $master_ip: { get_attr: [ master, ip ] }
                                $proxy_host: { get_param: proxy_host }
                                $proxy_port: { get_param: proxy_port }
                            template: { get_file: slave.sh }

outputs:
  ip:
    description: Master IP of kubernetes cluster
    value: {get_attr: [master, ip] }
